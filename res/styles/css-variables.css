

/* Variable names are case-sensitive */
/* Variable values do inherit */

/* This is global scope variables */
:root {
    --first-color: aqua;
}



.firstSquare {
    width: 200px; height: 200px;
    background: var(--first-color);

    /* Doesn't work because scope is .secondSquare */
    /*background: var(--second-color);*/
}


.secondSquare {
    width: 200px; height: 200px;
    --second-color: blue;
    background: var(--second-color);
}

/*  The SELECTOR given to the ruleset defines the scope that the custom property can be used in. */
.thirdSquareContainer {
    display: flex;
    --third-color: palevioletred;
}

.thirdSquareContainer .thirdSquare {
    width: 200px; height: 200px;
    background: blue;
    border: 5px solid var(--third-color); /* variable works */
}



.text1 {
    color: var(--text-color); /* variable isn't defined, will be color default: black */
}
.text2 {
    --text-color: red;
    color: var(--text-color); /* red */
}
.text3 {
    --text-color: green;
    color: var(--text-color); /* green */
}
.text4 {
    color: var(--text-color, blue); /* default value: blue */
    --font-size: 3em;
    background-color: var(--font-size, aquamarine);
    font-size: var(--text-color, var(--font-size, 2em)); /* default value of other type, than the variable type */
}
/*
    var(--foo, red, blue) defines a fallback of red, blue
    â€” anything between the first comma and the end of the function is considered a fallback value.
 */